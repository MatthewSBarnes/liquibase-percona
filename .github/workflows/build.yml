name: Build

on: push

jobs:
  integration-tests:
    name: Java ${{ matrix.java }}, MySQL ${{ matrix.mysql }}, MariaDB ${{ matrix.mariadb }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11, 16]
        mysql: [5.7, 8]
        mariadb: [10]
    steps:
    - uses: actions/checkout@v2
    - name: Install Perl modules
      uses: perl-actions/install-with-cpanm@v1
      with:
        install: |
          DBD::mysql
    - name: Cache Local Maven Repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java }}
        distribution: 'adopt'
    - name: Test With Maven
      run: ./mvnw -B clean verify --file pom.xml -Prun-its -Dmysql_image=mysql:${{ matrix.mysql }} -Dmariadb_image=mariadb:${{ matrix.mariadb }}

  snapshot-deploy:
    name: Deploy Snapshot to Sonatype
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - uses: actions/checkout@v2

    - name: Install Perl modules
      uses: perl-actions/install-with-cpanm@v1
      with:
        install: |
          DBD::mysql

    - name: Cache Local Maven Repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        server-id: sonatype-nexus-staging
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_SECRET }}
        gpg-passphrase: GPG_PASSPHRASE

    - name: Set Version Tag ENV from POM
      run: ./.github/set-version-from-pom.sh
    - run: echo $VERSION_TAG

    - name: Deploy Snapshot with Maven
      if: ${{ github.repository == 'liquibase/liquibase-percona' && github.ref == 'main' && contains(env.VERSION_TAG, 'SNAPSHOT') }}
      run: ./mvnw -B clean deploy -Dmaven.test.skip -Dpmd.skip -Dcpd.skip -Dspotbugs.skip --file pom.xml -Prelease
      env:
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
